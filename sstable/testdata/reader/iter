build
a.SET.1:A
b.SET.2:B
c.SET.3:C
d.SET.4:D
----

iter
first
next
next
next
next
----
<a:1>
<b:2>
<c:3>
<d:4>
.

iter
seek-ge a
next
next
next
next
----
<a:1>
<b:2>
<c:3>
<d:4>
.

iter
seek-ge b
next
next
next
----
<b:2>
<c:3>
<d:4>
.

iter
seek-ge c
next
next
----
<c:3>
<d:4>
.

iter
seek-ge d
next
----
<d:4>
.

iter
seek-ge e
----
.

iter
seek-ge d
seek-ge z
----
<d:4>
.

iter
seek-ge b
seek-ge c
seek-ge d
seek-ge e
----
<b:2>
<c:3>
<d:4>
.

iter
last
prev
prev
prev
prev
----
<d:4>
<c:3>
<b:2>
<a:1>
.

iter
seek-lt e
prev
prev
prev
prev
----
<d:4>
<c:3>
<b:2>
<a:1>
.

iter
seek-lt d
prev
prev
prev
----
<c:3>
<b:2>
<a:1>
.

iter
seek-lt c
prev
prev
----
<b:2>
<a:1>
.

iter
seek-lt b
prev
----
<a:1>
.

iter
seek-lt a
----
.

iter
seek-lt d
seek-lt c
seek-lt b
seek-lt a
----
<c:3>
<b:2>
<a:1>
.

iter globalSeqNum=1
first
next
next
next
next
----
<a:1>
<b:1>
<c:1>
<d:1>
.

iter globalSeqNum=10
first
next
next
next
next
----
<a:10>
<b:10>
<c:10>
<d:10>
.

iter globalSeqNum=0
seek-lt x
----
<d:4>

get
b
a
f
d
c
----
B
A
<err: pebble: not found>
D
C

# Verify that clearing the bounds on an iterator also clears
# previously set block{Lower,Upper}.

iter
seek-ge c
seek-lt b
set-bounds lower=b upper=c
seek-ge c
seek-lt b
set-bounds lower= upper=
seek-ge c
seek-lt b
----
<c:3>
<a:1>
.
.
.
.
<c:3>
<a:1>

# Verify that seeking past the end of the sstable leaves the iterator
# in a state where prev returns the last key in the table.

iter
seek-lt d
seek-ge f
prev
----
<c:3>
.
<d:4>

# Verify that seeking before the beginning of the sstable leaves the
# iterator in a state where next returns the first key in the table.

iter
seek-ge b
seek-lt a
next
----
<b:2>
.
<a:1>

# Verify that iteration from before the beginning or after the end of
# the sstable does not "wrap around". A bug previously allowed this to
# happen by letting the data block iterator and index iterator get out
# of sync.

build
a.SET.1:a
----

iter
first
prev
next
next
next
----
<a:1>
.
<a:1>
.
.

iter
last
next
prev
prev
prev
----
<a:1>
.
<a:1>
.
.
