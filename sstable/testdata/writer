build
a.SET.1:a
----
point:   [a#1,1,a#1,1]
range:   [#0,0,#0,0]
seqnums: [1,1]

scan
----
a#1,1:a

scan-range-del
----

build
a.SET.1:a
b.DEL.2:b
c.MERGE.3:c
d.RANGEDEL.4:e
f.SET.5:f
g.DEL.6:g
h.MERGE.7:h
i.RANGEDEL.8:j
----
point:   [a#1,1,h#7,2]
range:   [d#4,15,j#72057594037927935,15]
seqnums: [1,8]

scan
----
a#1,1:a
b#2,0:b
c#3,2:c
f#5,1:f
g#6,0:g
h#7,2:h

scan-range-del
----
d#4,15:e
i#8,15:j

# 3: a-----------m
# 2:      f------------s
# 1:          j---------------z

build
a.RANGEDEL.3:m
f.RANGEDEL.2:s
j.RANGEDEL.1:z
----
point:   [#0,0,#0,0]
range:   [a#3,15,z#72057594037927935,15]
seqnums: [1,3]

scan
----

scan-range-del
----
a#3,15:f
f#3,15:j
f#2,15:j
j#3,15:m
j#2,15:m
j#1,15:m
m#2,15:s
m#1,15:s
s#1,15:z

# The range tombstone upper bound is exclusive, so a point operation
# on that same key will be the actual boundary.

build
a.RANGEDEL.3:b
b.SET.4:c
----
point:   [b#4,1,b#4,1]
range:   [a#3,15,b#72057594037927935,15]
seqnums: [3,4]

build
a.RANGEDEL.3:b
b.SET.2:c
----
point:   [b#2,1,b#2,1]
range:   [a#3,15,b#72057594037927935,15]
seqnums: [2,3]

build
a.RANGEDEL.3:c
b.SET.2:c
----
point:   [b#2,1,b#2,1]
range:   [a#3,15,c#72057594037927935,15]
seqnums: [2,3]

# Keys must be added in order.

build
a.SET.1:b
a.SET.2:c
----
pebble: keys must be added in order: a#1,1, a#2,1

build
b.SET.1:a
a.SET.2:b
----
pebble: keys must be added in order: b#1,1, a#2,1

build
b.RANGEDEL.1:c
a.RANGEDEL.2:b
----
pebble: keys must be added in order: b#1,15 > a#2,15

build-raw
a.RANGEDEL.1:c
a.RANGEDEL.2:c
----
pebble: keys must be added in order: a#1,15, a#2,15

build-raw
a.RANGEDEL.1:c
b.RANGEDEL.2:d
----
pebble: overlapping tombstones must be fragmented: a-c#1 vs b-d#2

build-raw
a.RANGEDEL.2:c
a.RANGEDEL.1:d
----
pebble: overlapping tombstones must be fragmented: a-c#2 vs a-d#1

build-raw
a.RANGEDEL.1:c
c.RANGEDEL.2:d
----
point:   [#0,0,#0,0]
range:   [a#1,15,d#72057594037927935,15]
seqnums: [1,2]
